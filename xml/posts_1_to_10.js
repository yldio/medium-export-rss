module.exports = `<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
<channel>
    <title><![CDATA[YLD Blog - Medium]]></title>
    <description><![CDATA[YLD&#39;s latest thoughts on Software Engineering, Design, leadership and Digital Products - Medium]]></description>
    <link>https://medium.com/yld-blog</link>
    <image>
        <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
        <title>YLD Blog - Medium</title>
        <link>https://medium.com/yld-blog</link>
    </image>
    <generator>Medium</generator>
    <lastBuildDate>Tue, 27 Aug 2019 15:30:17 GMT</lastBuildDate>
    <atom:link href="https://medium.com/feed/yld-blog" rel="self" type="application/rss+xml"/>
    <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
    <atom:link href="http://medium.superfeedr.com" rel="hub"/>
    <item>
        <title><![CDATA[Easier GraphQL wrappers for your REST APIâ€™s]]></title>
        <link>https://medium.com/yld-blog/easier-graphql-wrappers-for-your-rest-apis-1410b0b5446d</link>
        <guid isPermaLink="false">https://medium.com/p/1410b0b5446d</guid>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[api]]></category>
        <category><![CDATA[rest]]></category>
        <category><![CDATA[graphql]]></category>
        <category><![CDATA[apollo]]></category>
        <dc:creator><![CDATA[Sara Vieira]]></dc:creator>
        <pubDate>Mon, 17 Dec 2018 08:52:40 GMT</pubDate>
        <atom:updated>2019-03-08T19:02:56.688Z</atom:updated>
        <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*o7lUGdzcGtBtv_b1TbGFEQ.jpeg" /><figcaption>Return oneÂ user</figcaption></figure><p>A very common use case for building <a href="https://www.yld.io/speciality/graphql/">GraphQL</a> APIâ€™s is to wrap REST APIâ€™s for a better experience in the Frontend and also some more type checking in ourÂ backend.</p><p>Apollo knows this so there is a package to help with this and itâ€™s called apollo-datasource-rest. Itâ€™s strong points is that it handles some of the caching for you as it runs through their cache and also it exposes a class that makes it easier for us to keep our codeÂ clean.</p><p>If you wanna follow along you can start with the starter ApolloServer sandbox on CodeSandbox that you can findÂ <a href="https://codesandbox.io/s/apollo-server">here</a>.</p><h3>Wrap our RESTÂ API</h3><p>For this example I am going to use the <a href="https://randomuser.me/">RandomUser API</a> and we will create two queries. One for getting one random user and one for getting a set ofÂ users.</p><p>So letâ€™s start by defining our Schema and it should look something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5eb2bd2e6209b11c94fbd2d9b9ad2812/href">https://medium.com/media/5eb2bd2e6209b11c94fbd2d9b9ad2812/href</a></iframe><p>Some of the return values from the API I donâ€™t really want to return so I will ignoreÂ them.</p><p>Now letâ€™s create our class where we will use apollo-datasource-rest and in here the first thing we need to do is to extend the RESTDataSource class that the package exposes toÂ us.</p><p>In it we have a constructor where we can define our base API url. Our file should look something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a9f1b99c5978ac4ab791d6b1b4ad6a4c/href">https://medium.com/media/a9f1b99c5978ac4ab791d6b1b4ad6a4c/href</a></iframe><p>Now that we have the basis of our class we need to define our functions and they will all have a signature close toÂ this:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4f93e730232768d505890bbabdd82b14/href">https://medium.com/media/4f93e730232768d505890bbabdd82b14/href</a></iframe><p>So we create async functions that will fetch our data, give it any parameters that we want and from the parent RESTDataSource we have access to some methods to interact withÂ APIâ€™s.</p><p>Besides the get method we also have the normal methods to allow for POST, PUT, PATCH, and DELETE requests so you can build any type of request to your RESTÂ api.</p><p>Letâ€™s create our function to get one singleÂ user:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/693b646695d38d56ee66565f4f263a2b/href">https://medium.com/media/693b646695d38d56ee66565f4f263a2b/href</a></iframe><p>Now that we have this we can use it in our resolvers.</p><h3>Using our dataÂ sources</h3><p>Moving back to our index.js when we initialise our ApolloServer there is an option we can pass called dataSources and that goes after our resolvers definition.</p><p>This property takes a function that will return an object with all your dataSources so in our case our new ApolloServer instantiation will now lookÂ like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c24d3157910dd57ae0c86c05020eafbe/href">https://medium.com/media/c24d3157910dd57ae0c86c05020eafbe/href</a></iframe><p>By passing it as a dataSource we now have access to it on all our resolvers as part of the third argument so in our resolver to get the user we need to call the function we created in our class likeÂ so:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/7ebfefaaeff6c5b0c61fd2b1858c831c/href">https://medium.com/media/7ebfefaaeff6c5b0c61fd2b1858c831c/href</a></iframe><p>If you now try to run the getUser query likeÂ so:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f206a665e2a9d46a26bc1a8c88bc875c/href">https://medium.com/media/f206a665e2a9d46a26bc1a8c88bc875c/href</a></iframe><p>You should already see someÂ data</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lLvmxcuw1S-jhE27ZuVgvg.png" /><figcaption>Return oneÂ user</figcaption></figure><p>Letâ€™s now code our getUsers function and in this one letâ€™s also allow the user pass the number of users they wants toÂ receive.</p><p>The endpoint for that is: <em>https://randomuser.me/api/?results=number </em>so letâ€™s code our function with some sensible defaults:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/cb1399e706a6c166483a8502af760375/href">https://medium.com/media/cb1399e706a6c166483a8502af760375/href</a></iframe><p>So here we get a variable called people and assign it a default of 10 so if the user doesnâ€™t pass a the argument we will just send 10 random people. This feature is called Default Parameters and you can read all about it atÂ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>.</p><p>Letâ€™s now add a new function to our resolvers forÂ query:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/525ab0a34ecc4e00c3089aa5c378f516/href">https://medium.com/media/525ab0a34ecc4e00c3089aa5c378f516/href</a></iframe><p>In here we use the second parameter of the function and thatâ€™s because we get whatever the user passed as a parameter to theÂ query.</p><p>If you now run something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4b10e333d6aaefef925bc149194357a6/href">https://medium.com/media/4b10e333d6aaefef925bc149194357a6/href</a></iframe><p>You should get three randomÂ users.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TJJCC1ZJNS4933vBQNpaCQ.png" /><figcaption>Getting a certain amount if random users from theÂ API</figcaption></figure><h3>Wrapping up</h3><p>In my opinion this is a more elegant way of wrapping our REST APIâ€™s as we have a clear definition of what we are doing in each function and also we get Apollo to take care of all thatâ€™s not the actual fetching and modelling of ourÂ data.</p><p>If you want the see the full coded example you can see itÂ here:</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fxvw475x3ww&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fxvw475x3ww&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fxvw475x3ww%2Fscreenshot.png&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=codesandbox" width="1000" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/be6cb65ac894bcd7e3b2f9e69be7a7b2/href">https://medium.com/media/be6cb65ac894bcd7e3b2f9e69be7a7b2/href</a></iframe><p>Photo by <a href="https://unsplash.com/photos/vdWewqfr_V0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Fancycrave</a> onÂ <a href="https://unsplash.com/search/photos/computer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p><p>Written by <a href="https://twitter.com/NikkitaFTW">Sara Vieira</a>â€Šâ€”â€ŠDeveloper Advocate at<a href="https://www.yld.io">Â YLD.</a></p><h4>Interested in GraphQL? Read more aboutÂ it:</h4><ul><li><a href="https://medium.com/yld-engineering-blog/create-custom-graphql-types-999f009d3f46">Create custom GraphQL types</a></li><li><a href="https://medium.com/yld-engineering-blog/the-new-apollo-server-is-3f2119e4e7c9">The new Apollo Server is ðŸ’¯</a></li></ul>]]></content:encoded>
    </item>
    <item>
        <title><![CDATA[Easier GraphQL wrappers for your REST APIâ€™s]]></title>
        <link>https://medium.com/yld-blog/easier-graphql-wrappers-for-your-rest-apis-1410b0b5446d</link>
        <guid isPermaLink="false">https://medium.com/p/1410b0b5446d</guid>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[api]]></category>
        <category><![CDATA[rest]]></category>
        <category><![CDATA[graphql]]></category>
        <category><![CDATA[apollo]]></category>
        <dc:creator><![CDATA[Sara Vieira]]></dc:creator>
        <pubDate>Mon, 17 Dec 2018 08:52:40 GMT</pubDate>
        <atom:updated>2019-03-08T19:02:56.688Z</atom:updated>
        <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*o7lUGdzcGtBtv_b1TbGFEQ.jpeg" /><figcaption>Return oneÂ user</figcaption></figure><p>A very common use case for building <a href="https://www.yld.io/speciality/graphql/">GraphQL</a> APIâ€™s is to wrap REST APIâ€™s for a better experience in the Frontend and also some more type checking in ourÂ backend.</p><p>Apollo knows this so there is a package to help with this and itâ€™s called apollo-datasource-rest. Itâ€™s strong points is that it handles some of the caching for you as it runs through their cache and also it exposes a class that makes it easier for us to keep our codeÂ clean.</p><p>If you wanna follow along you can start with the starter ApolloServer sandbox on CodeSandbox that you can findÂ <a href="https://codesandbox.io/s/apollo-server">here</a>.</p><h3>Wrap our RESTÂ API</h3><p>For this example I am going to use the <a href="https://randomuser.me/">RandomUser API</a> and we will create two queries. One for getting one random user and one for getting a set ofÂ users.</p><p>So letâ€™s start by defining our Schema and it should look something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5eb2bd2e6209b11c94fbd2d9b9ad2812/href">https://medium.com/media/5eb2bd2e6209b11c94fbd2d9b9ad2812/href</a></iframe><p>Some of the return values from the API I donâ€™t really want to return so I will ignoreÂ them.</p><p>Now letâ€™s create our class where we will use apollo-datasource-rest and in here the first thing we need to do is to extend the RESTDataSource class that the package exposes toÂ us.</p><p>In it we have a constructor where we can define our base API url. Our file should look something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/a9f1b99c5978ac4ab791d6b1b4ad6a4c/href">https://medium.com/media/a9f1b99c5978ac4ab791d6b1b4ad6a4c/href</a></iframe><p>Now that we have the basis of our class we need to define our functions and they will all have a signature close toÂ this:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4f93e730232768d505890bbabdd82b14/href">https://medium.com/media/4f93e730232768d505890bbabdd82b14/href</a></iframe><p>So we create async functions that will fetch our data, give it any parameters that we want and from the parent RESTDataSource we have access to some methods to interact withÂ APIâ€™s.</p><p>Besides the get method we also have the normal methods to allow for POST, PUT, PATCH, and DELETE requests so you can build any type of request to your RESTÂ api.</p><p>Letâ€™s create our function to get one singleÂ user:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/693b646695d38d56ee66565f4f263a2b/href">https://medium.com/media/693b646695d38d56ee66565f4f263a2b/href</a></iframe><p>Now that we have this we can use it in our resolvers.</p><h3>Using our dataÂ sources</h3><p>Moving back to our index.js when we initialise our ApolloServer there is an option we can pass called dataSources and that goes after our resolvers definition.</p><p>This property takes a function that will return an object with all your dataSources so in our case our new ApolloServer instantiation will now lookÂ like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/c24d3157910dd57ae0c86c05020eafbe/href">https://medium.com/media/c24d3157910dd57ae0c86c05020eafbe/href</a></iframe><p>By passing it as a dataSource we now have access to it on all our resolvers as part of the third argument so in our resolver to get the user we need to call the function we created in our class likeÂ so:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/7ebfefaaeff6c5b0c61fd2b1858c831c/href">https://medium.com/media/7ebfefaaeff6c5b0c61fd2b1858c831c/href</a></iframe><p>If you now try to run the getUser query likeÂ so:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f206a665e2a9d46a26bc1a8c88bc875c/href">https://medium.com/media/f206a665e2a9d46a26bc1a8c88bc875c/href</a></iframe><p>You should already see someÂ data</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lLvmxcuw1S-jhE27ZuVgvg.png" /><figcaption>Return oneÂ user</figcaption></figure><p>Letâ€™s now code our getUsers function and in this one letâ€™s also allow the user pass the number of users they wants toÂ receive.</p><p>The endpoint for that is: <em>https://randomuser.me/api/?results=number </em>so letâ€™s code our function with some sensible defaults:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/cb1399e706a6c166483a8502af760375/href">https://medium.com/media/cb1399e706a6c166483a8502af760375/href</a></iframe><p>So here we get a variable called people and assign it a default of 10 so if the user doesnâ€™t pass a the argument we will just send 10 random people. This feature is called Default Parameters and you can read all about it atÂ <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters">MDN</a>.</p><p>Letâ€™s now add a new function to our resolvers forÂ query:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/525ab0a34ecc4e00c3089aa5c378f516/href">https://medium.com/media/525ab0a34ecc4e00c3089aa5c378f516/href</a></iframe><p>In here we use the second parameter of the function and thatâ€™s because we get whatever the user passed as a parameter to theÂ query.</p><p>If you now run something like:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4b10e333d6aaefef925bc149194357a6/href">https://medium.com/media/4b10e333d6aaefef925bc149194357a6/href</a></iframe><p>You should get three randomÂ users.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TJJCC1ZJNS4933vBQNpaCQ.png" /><figcaption>Getting a certain amount if random users from theÂ API</figcaption></figure><h3>Wrapping up</h3><p>In my opinion this is a more elegant way of wrapping our REST APIâ€™s as we have a clear definition of what we are doing in each function and also we get Apollo to take care of all thatâ€™s not the actual fetching and modelling of ourÂ data.</p><p>If you want the see the full coded example you can see itÂ here:</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodesandbox.io%2Fembed%2Fxvw475x3ww&amp;url=https%3A%2F%2Fcodesandbox.io%2Fs%2Fxvw475x3ww&amp;image=https%3A%2F%2Fcodesandbox.io%2Fapi%2Fv1%2Fsandboxes%2Fxvw475x3ww%2Fscreenshot.png&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=codesandbox" width="1000" height="500" frameborder="0" scrolling="no"><a href="https://medium.com/media/be6cb65ac894bcd7e3b2f9e69be7a7b2/href">https://medium.com/media/be6cb65ac894bcd7e3b2f9e69be7a7b2/href</a></iframe><p>Photo by <a href="https://unsplash.com/photos/vdWewqfr_V0?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Fancycrave</a> onÂ <a href="https://unsplash.com/search/photos/computer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a></p><p>Written by <a href="https://twitter.com/NikkitaFTW">Sara Vieira</a>â€Šâ€”â€ŠDeveloper Advocate at<a href="https://www.yld.io">Â YLD.</a></p><h4>Interested in GraphQL? Read more aboutÂ it:</h4><ul><li><a href="https://medium.com/yld-engineering-blog/create-custom-graphql-types-999f009d3f46">Create custom GraphQL types</a></li><li><a href="https://medium.com/yld-engineering-blog/the-new-apollo-server-is-3f2119e4e7c9">The new Apollo Server is ðŸ’¯</a></li></ul>]]></content:encoded>
    </item>
</channel>
</rss>`;
